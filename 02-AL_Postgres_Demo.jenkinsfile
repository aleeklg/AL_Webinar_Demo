//
// Jenkins Pipeline for Postgres using DCT to
//   Provision ALPOST1 to MaskGC
//   Mask ALPOST1
//   Provision masked vDB to QA and DEV
//   Pre-Test BMark ALPOST2 (QA)
//   Run Test and Error ALPOST2 (QA)
//   BMark Error and make PUBLIC
//   QA Rewind to Pre-Test
//   DEV Refresh to ERROR
//   Delete Whole Env
//
// Demo Env:  AL Postgres Demo
//
// 2025 (c) Delphix - Andrew Lee (andrew.lee@perforce.com)
//

pipeline {

   agent { label 'devops' }
   stages {

// Provision vDB ALPOST1 to MaskGC

      stage('Provision ALPOST1') {
         agent { label 'devops' }
         steps {
            sh """/root/dct-toolkit provision_vdb_by_snapshot postgres \
                  source_data_id='Postgres_crm' \
                  name='ALPOST1' \
                  postgres_port='8015' \
                  environment_id='Postgres Staging' \
                  environment_user_id='postgres' --auto_select_repository \
                  target_group_id='MaskGC' \
                  mount_point='/mnt/provision/ALPOST1_8015' \
                  configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
                  } ]'
               """
            }
      }

// Pause to capture UnMasked Data

      stage('PAUSE: Pre-Masking') {
         steps {
           input message: 'Proceed with MASKING?', ok: 'Yes, proceed'
         }
      }

// Mask ALPOST1

      stage('Mask ALPOST1') {
         agent { label 'devops' }
         steps {
            sh "/root/dct-toolkit execute_masking_job engine_id=cce masking_job_id='ALPOST1 Masking'"
         }
      }

// Pause to capture Masked Data

      stage('PAUSE: Post-Masking') {
         steps {
           input message: 'Proceed with QA and DEV?', ok: 'Yes, proceed'
         }
      }

// Provision cDB to QA and DEV

      stage('Provision vDB to QA & DEV') {
      parallel {
      stage('Provision ALPOST2') {
         agent { label 'devops' }
         steps {
            sh """/root/dct-toolkit provision_vdb_by_snapshot postgres \
                  source_data_id='ALPOST1' \
                  name='ALPOST2' \
                  postgres_port='8016' \
                  environment_id='Postgres Staging' \
                  environment_user_id='postgres' --auto_select_repository \
                  target_group_id='QA' \
                  mount_point='/mnt/provision/ALPOST2_8016' \
                  configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
                  } ]'
               """
            }
      }
      stage('Provision ALPOST3') {
         agent { label 'devops' }
         steps {
            sh """/root/dct-toolkit provision_vdb_by_snapshot postgres \
                  source_data_id='ALPOST1' \
                  name='ALPOST3' \
                  postgres_port='8017' \
                  environment_id='Postgres Staging' \
                  environment_user_id='postgres' --auto_select_repository \
                  target_group_id='DEV' \
                  mount_point='/mnt/provision/ALPOST3_8017' \
                  configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
                  } ]'
               """
            }
         }
      }
      }

// Pause to Capture QA and DEV

      stage('PAUSE: QA & DEV') {
         steps {
           input message: 'Proceed with QA Testing?', ok: 'Yes, proceed'
         }
      }

// Bookmark ALPOST2 Pre-Test

      stage('Pre-Test BMark') {
         agent { label 'devops' }
         steps {
            sh "/root/dct-toolkit create_bookmark vdb_ids='ALPOST2' name='Pre-Test Bookmark'"
         }
      }     

// Start Testing and Destroy Data

      stage('Start Testing') {
         steps {
            sh '''
               export PGPASSWORD=Delphix_123!
               psql -h 10.160.1.74 -p 8016 -U postgres -d crm -c "UPDATE contacts SET last_name = 'LEE';"
            '''
         }
      }

// Bookmark Error and make PUBLIC

      stage('Error BMark and Make Public') {
         agent { label 'devops' }
         steps {
            sh "/root/dct-toolkit create_bookmark vdb_ids='ALPOST1' name='Error Bookmark' bookmark_type=PUBLIC"
         }
      }

// Pause to Capture ERROR

      stage('PAUSE: ERROR') {
         steps {
           input message: 'Proceed with Rewind & Refresh?', ok: 'Yes, proceed'
         }
      }

// Rewind QA to Pre-Test and Refresh DEV to Bookmark ERROR

      stage('QA:Rewind & DEV: ERROR') {
      parallel {
      stage('Rewind to Pre-Test BMark') {
         agent { label 'devops' }
         steps {
            sh "/root/dct-toolkit refresh_vdb_from_bookmark vdb_id='ALPOST2' bookmark_id='Pre-Test Bookmark'"
         }
      }
      stage('Send Error to DEV') {
         agent { label 'devops' }
         steps {
            sh "/root/dct-toolkit refresh_vdb_from_bookmark vdb_id='ALPOST3' bookmark_id='Error Bookmark'"
         }
      }
      }
      }

// Pause: Delete whole Environment?

      stage('PAUSE: REVERT Env?') {
        steps {
          script {
            try {
              timeout(time: 5, unit: 'MINUTES') {
                input message: 'Proceed to DELETE vDB?', ok: 'Yes, proceed'
              }
              echo "Approved manually. Continuing..."
            } catch (err) {
              echo "No response within 5 minutes. Proceeding automatically."
            }
          }
        }
      }
      stage('Delete 2 vDBs') {
      parallel {
      stage('Delete ALPOST1') {
         agent { label 'devops' }
         steps {
            sh "/root/dct-toolkit delete_vdb vdb_id='ALPOST1'"
         }
      }
      stage('Delete ALPOST2') {
         agent { label 'devops' }
         steps {
            sh "/root/dct-toolkit delete_vdb vdb_id='ALPOST2'"
         }
      }
      }
      }
   }
}
