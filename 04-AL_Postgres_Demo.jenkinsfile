// Version 04 - parameterized for easy portability
//
// Jenkins Pipeline for Postgres using DCT to
//   Provision AL_CRM_MASK and AL_ERP_MASK to MaskGC
//   Mask AL_CRM_MASK and AL_ERP_MASK
//   Provision masked vDB to QA and DEV
//   Pre-Test BMark AL_CRM_QA (QA)
//   Run Test and Error AL_CRM_QA (QA)
//   BMark Error and make PUBLIC
//   QA Rewind to Pre-Test BM
//   DEV Refresh to ERROR BM
//   Delete Whole Env
//
// Demo Env:  AL Postgres Demo
// 2025 (c) Delphix - Andrew Lee (andrew.lee@perforce.com)
//

def pipelineParams = [
dctToolKit          : '/root/dct-toolkit',
cceEngineId         : 'cce',
stagingEnvId        : 'Postgres Staging',
sourceCRM           : 'Postgres_crm',
sourceERP           : 'Postgres_erp',

mountBasePath       : '/mnt/provision',

crmMaskingJob       : 'ALPOST1 Masking',
erpMaskingJob       : 'ERP - Mask GC - Mask',

crmMaskVdbName      : 'AL_CRM_MASK',
crmMaskPort         : '8015',
crmQaVdbName        : 'AL_CRM_QA',
crmQaPort           : '8016',
crmDevVdbName       : 'AL_CRM_DEV',
crmDevPort          : '8017',
erpMaskVdbName      : 'AL_ERP_MASK',
erpMaskPort         : '8025',
erpQaVdbName        : 'AL_ERP_QA',
erpQaPort           : '8026',
erpDevVdbName       : 'AL_ERP_DEV',
erpDevPort          : '8027',

maskGroupId         : 'MaskGC',
qaGroupId           : 'QA',
devGroupId          : 'DEV',

postgresHost        : '10.160.1.74',
dbNameQa            : 'crm',
postgresUser        : 'postgres',
postgresPassword    : 'Delphix_123!'
]


pipeline {
//  agent { label 'devops' }
    agent any
  stages {

// Provision vDB AL_CRM_MASK and AL_ERP_MASK to MaskGC

    stage('Provision vDBs from CRM and ERP') {
      parallel {
        stage('Provision crmMask vDB') {
          steps {
            sh """${pipelineParams.dctToolKit} provision_vdb_by_snapshot postgres \
              source_data_id='${pipelineParams.sourceCRM}' \
              name='${pipelineParams.crmMaskVdbName}' \
              postgres_port='${pipelineParams.crmMaskPort}' \
              environment_id='${pipelineParams.stagingEnvId}' \
              environment_user_id='${pipelineParams.postgresUser}' --auto_select_repository \
              target_group_id='${pipelineParams.maskGroupId}' \
              mount_point='${pipelineParams.mountBasePath}/${pipelineParams.crmMaskVdbName}_${pipelineParams.crmMaskPort}' \
              configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
              } ]' 
            """         
          }
        }
        stage('Provision erpMask vDB') {
          steps {
            sh """${pipelineParams.dctToolKit} provision_vdb_by_snapshot postgres \
              source_data_id='${pipelineParams.sourceERP}' \
              name='${pipelineParams.erpMaskVdbName}' \
              postgres_port='${pipelineParams.erpMaskPort}' \
              environment_id='${pipelineParams.stagingEnvId}' \
              environment_user_id='${pipelineParams.postgresUser}' --auto_select_repository \
              target_group_id='${pipelineParams.maskGroupId}' \
              mount_point='${pipelineParams.mountBasePath}/${pipelineParams.erpMaskVdbName}_${pipelineParams.erpMaskPort}' \
              configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
              } ]' 
            """
          }
        }
      }
    }

// Pause to capture UnMasked Data

    stage('PAUSE: Pre-Masking') {
      steps {
        input message: 'Proceed with MASKING?', ok: 'Yes, proceed'
      }
    }

    stage('Mask vDBs') {
      parallel {
        stage('Mask crmMask vDB') {
          steps {
            sh "${pipelineParams.dctToolKit} execute_masking_job engine_id='${pipelineParams.cceEngineId}' masking_job_id='${pipelineParams.crmMaskingJob}'"
          }
        }
        stage('Mask erpMask vDB') {
          steps {
            sh "${pipelineParams.dctToolKit} execute_masking_job engine_id='${pipelineParams.cceEngineId}' masking_job_id='${pipelineParams.erpMaskingJob}'"
          }
        }
      }
    }

// After masking, take a snapshot

    stage('Snapshot MASKED vDBs') {
      parallel {
        stage('Snapshot crmMask vDB') {
          steps {
            sh "${pipelineParams.dctToolKit} snapshot_vdb vdb_id='${pipelineParams.crmMaskVdbName}'"
          }
        }
        stage('Snapshot erpMask vDB') {
          steps {
            sh "${pipelineParams.dctToolKit} snapshot_vdb vdb_id='${pipelineParams.erpMaskVdbName}'"
          }
        }
      }
    }

// Pause to capture Masked Data

    stage('PAUSE: Post-Masking') {
      steps {
        input message: 'Proceed with QA and DEV?', ok: 'Yes, proceed'
      }
    }

// Provision vDB to QA and DEV

    stage('Provision QA/DEV vDBs') {
      parallel {
        stage('Provision crmQa vDB') {
          steps {
            sh """${pipelineParams.dctToolKit} provision_vdb_by_snapshot postgres \
              source_data_id='${pipelineParams.crmMaskVdbName}' \
              name='${pipelineParams.crmQaVdbName}' \
              postgres_port='${pipelineParams.crmQaPort}' \
              environment_id='${pipelineParams.stagingEnvId}' \
              environment_user_id='${pipelineParams.postgresUser}' --auto_select_repository \
              target_group_id='${pipelineParams.qaGroupId}' \
              mount_point='${pipelineParams.mountBasePath}/${pipelineParams.crmQaVdbName}_${pipelineParams.crmQaPort}' \
              configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
              } ]'
            """
          }
        }
        stage('Provision crmDev vDB') {
          steps {
            sh """${pipelineParams.dctToolKit} provision_vdb_by_snapshot postgres \
              source_data_id='${pipelineParams.crmMaskVdbName}' \
              name='${pipelineParams.crmDevVdbName}' \
              postgres_port='${pipelineParams.crmDevPort}' \
              environment_id='${pipelineParams.stagingEnvId}' \
              environment_user_id='${pipelineParams.postgresUser}' --auto_select_repository \
              target_group_id='${pipelineParams.devGroupId}' \
              mount_point='${pipelineParams.mountBasePath}/${pipelineParams.crmDevVdbName}_${pipelineParams.crmDevPort}' \
              configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
              } ]'
            """
          }
        }
        stage('Provision erpQa vDB') {
          steps {
            sh """${pipelineParams.dctToolKit} provision_vdb_by_snapshot postgres \
              source_data_id='${pipelineParams.erpMaskVdbName}' \
              name='${pipelineParams.erpQaVdbName}' \
              postgres_port='${pipelineParams.erpQaPort}' \
              environment_id='${pipelineParams.stagingEnvId}' \
              environment_user_id='${pipelineParams.postgresUser}' --auto_select_repository \
              target_group_id='${pipelineParams.qaGroupId}' \
              mount_point='${pipelineParams.mountBasePath}/${pipelineParams.erpQaVdbName}_${pipelineParams.erpQaPort}' \
              configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
              } ]'
            """
          }
        }
        stage('Provision erpDev vDB}') {
          steps {
            sh """${pipelineParams.dctToolKit} provision_vdb_by_snapshot postgres \
              source_data_id='${pipelineParams.erpMaskVdbName}' \
              name='${pipelineParams.erpDevVdbName}' \
              postgres_port='${pipelineParams.erpDevPort}' \
              environment_id='${pipelineParams.stagingEnvId}' \
              environment_user_id='${pipelineParams.postgresUser}' --auto_select_repository \
              target_group_id='${pipelineParams.devGroupId}' \
              mount_point='${pipelineParams.mountBasePath}/${pipelineParams.erpDevVdbName}_${pipelineParams.erpDevPort}' \
              configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
              } ]'
            """
          }
        }
      }
    }

// Pause to Capture QA and DEV

    stage('PAUSE: QA & DEV') {
      steps {
        input message: 'Proceed with QA Testing?', ok: 'Yes, proceed'
      }
    }

// Bookmark AL_CRM_QA Pre-Test

    stage('Bookmark Pre-Test') {
      steps {
        sh "${pipelineParams.dctToolKit} create_bookmark vdb_ids='${pipelineParams.crmQaVdbName}' name='Pre-Test Bookmark'"
      }
    }

// Start Testing and Destroy Data

    stage('Start Testing') {
      steps {
        sh """
          export PGPASSWORD=${pipelineParams.postgresPassword}
          psql -h ${pipelineParams.postgresHost} -p ${pipelineParams.crmQaPort} -U ${pipelineParams.postgresUser} -d ${pipelineParams.dbNameQa} -c \"UPDATE contacts SET last_name = 'LEE';\"
        """
      }
    }

    stage('Bookmark Error and Make Public') {
      steps {
        sh "${pipelineParams.dctToolKit} create_bookmark vdb_ids='${pipelineParams.crmQaVdbName}' name='Error Bookmark' bookmark_type=PUBLIC"
      }
    }

// Pause to Capture ERROR

    stage('PAUSE: ERROR') {
      steps {
        input message: 'Proceed with Rewind QA & Refresh DEV?', ok: 'Yes, proceed'
      }
    }

// Rewind QA to Pre-Test and Refresh DEV to Bookmark ERROR

    stage('Rewind QA and Refresh DEV') {
      parallel {
        stage('Rewind QA') {
          steps {
            sh "${pipelineParams.dctToolKit} refresh_vdb_from_bookmark vdb_id='${pipelineParams.crmQaVdbName}' bookmark_id='Pre-Test Bookmark'"
          }
        }
        stage('Refresh DEV') {
          steps {
            sh "${pipelineParams.dctToolKit} refresh_vdb_from_bookmark vdb_id='${pipelineParams.crmDevVdbName}' bookmark_id='Error Bookmark'"
          }
        }
      }
    }

// Pause: Delete whole Environment?

    stage('PAUSE: DELETE Env') {
      steps {
        script {
          try {
            timeout(time: 15, unit: 'MINUTES') {
              input message: 'Proceed to DELETE vDB?', ok: 'Yes, proceed'
            }
          } catch (err) {
            echo "No response within 15 minutes. Proceeding automatically."
          }
        }
      }
    }

    stage('Delete All QA/DEV vDB') {
      parallel {
        stage('Delete crmQa vDB') {
          steps {
            sh "${pipelineParams.dctToolKit} delete_vdb vdb_id='${pipelineParams.crmQaVdbName}'"
          }
        }
        stage('Delete crmDev vDB') {
          steps {
            sh "${pipelineParams.dctToolKit} delete_vdb vdb_id='${pipelineParams.crmDevVdbName}'"
          }
        }
        stage('Delete erpQa vDB') {
          steps {
            sh "${pipelineParams.dctToolKit} delete_vdb vdb_id='${pipelineParams.erpQaVdbName}'"
          }
        }
        stage('Delete erpDev vDB') {
          steps {
            sh "${pipelineParams.dctToolKit} delete_vdb vdb_id='${pipelineParams.erpDevVdbName}'"
          }
        }
      }
    }

    stage('Delete All MASKED vDB') {
      parallel {
        stage('Delete crmMask vDB') {
          steps {
            sh "${pipelineParams.dctToolKit} delete_vdb vdb_id='${pipelineParams.crmMaskVdbName}'"
          }
        }
        stage('Delete erpMask vDB') {
          steps {
            sh "${pipelineParams.dctToolKit} delete_vdb vdb_id='${pipelineParams.erpMaskVdbName}'"
          }
        }
      }
    }
  }
}