// Version 04 - parameterized for easy portability
//
// Jenkins Pipeline for Postgres using DCT to
//   Provision AL_CRM_MASK and AL_ERP_MASK to MaskGC
//   Mask AL_CRM_MASK and AL_ERP_MASK
//   Provision masked vDB to QA and DEV
//   Pre-Test BMark AL_CRM_QA (QA)
//   Run Test and Error AL_CRM_QA (QA)
//   BMark Error and make PUBLIC
//   QA Rewind to Pre-Test BM
//   DEV Refresh to ERROR BM
//   Delete Whole Env
//
// Demo Env:  AL Postgres Demo
// 2025 (c) Delphix - Andrew Lee (andrew.lee@perforce.com)
//

def pipelineParams = [
  postgresUser      : 'postgres',
  postgresPassword  : 'Delphix_123!',
  postgresHost      : '10.160.1.74',
  stagingEnvId      : 'Postgres Staging',
  mountBasePath     : '/mnt/provision',
  sourceCRM         : 'Postgres_crm',
  sourceERP         : 'Postgres_erp',
  engineId          : 'cce',
  crmMaskingJob     : 'ALPOST1 Masking',
  erpMaskingJob     : 'ERP - Mask GC - Mask',
  qaGroupId         : 'QA',
  devGroupId        : 'DEV',
  maskGroupId       : 'MaskGC'
]

pipeline {
  agent { label 'devops' }
  stages {

// Provision vDB AL_CRM_MASK and AL_ERP_MASK to MaskGC

    stage('Provision vDBs from CRM and ERP') {
      parallel {
        stage('Provision AL_CRM_MASK') {
          steps {
            sh """/root/dct-toolkit provision_vdb_by_snapshot postgres \
              source_data_id='${pipelineParams.sourceCRM}' \
              name='AL_CRM_MASK' \
              postgres_port='8015' \
              environment_id='${pipelineParams.stagingEnvId}' \
              environment_user_id='${pipelineParams.postgresUser}' --auto_select_repository \
              target_group_id='${pipelineParams.maskGroupId}' \
              mount_point='${pipelineParams.mountBasePath}/AL_CRM_MASK_8015' \
              configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
              } ]' 
            """         
          }
        }
        stage('Provision AL_ERP_MASK') {
          steps {
            sh """/root/dct-toolkit provision_vdb_by_snapshot postgres \
              source_data_id='${pipelineParams.sourceERP}' \
              name='AL_ERP_MASK' \
              postgres_port='8025' \
              environment_id='${pipelineParams.stagingEnvId}' \
              environment_user_id='${pipelineParams.postgresUser}' --auto_select_repository \
              target_group_id='${pipelineParams.maskGroupId}' \
              mount_point='${pipelineParams.mountBasePath}/AL_ERP_MASK_8025' \
              configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
              } ]' 
            """
          }
        }
      }
    }

// Pause to capture UnMasked Data

    stage('PAUSE: Pre-Masking') {
      steps {
        input message: 'Proceed with MASKING?', ok: 'Yes, proceed'
      }
    }

    stage('Mask vDBs') {
      parallel {
        stage('Mask AL_CRM_MASK') {
          steps {
            sh "/root/dct-toolkit execute_masking_job engine_id='${pipelineParams.engineId}' masking_job_id='${pipelineParams.crmMaskingJob}'"
          }
        }
        stage('Mask AL_ERP_MASK') {
          steps {
            sh "/root/dct-toolkit execute_masking_job engine_id='${pipelineParams.engineId}' masking_job_id='${pipelineParams.erpMaskingJob}'"
          }
        }
      }
    }

// After masking, take a snapshot

    stage('Snapshot MASKED vDBs') {
      parallel {
        stage('Snapshot AL_CRM_MASK') {
          steps {
            sh "/root/dct-toolkit snapshot_vdb vdb_id='AL_CRM_MASK'"
          }
        }
        stage('Snapshot AL_ERP_MASK') {
          steps {
            sh "/root/dct-toolkit snapshot_vdb vdb_id='AL_ERP_MASK'"
          }
        }
      }
    }

// Pause to capture Masked Data

    stage('PAUSE: Post-Masking') {
      steps {
        input message: 'Proceed with QA and DEV?', ok: 'Yes, proceed'
      }
    }

// Provision vDB to QA and DEV

    stage('Provision QA/DEV vDBs') {
      parallel {
        stage('Provision AL_CRM_QA') {
          steps {
            sh """/root/dct-toolkit provision_vdb_by_snapshot postgres \
              source_data_id='AL_CRM_MASK' \
              name='AL_CRM_QA' \
              postgres_port='8016' \
              environment_id='${pipelineParams.stagingEnvId}' \
              environment_user_id='${pipelineParams.postgresUser}' --auto_select_repository \
              target_group_id='${pipelineParams.qaGroupId}' \
              mount_point='${pipelineParams.mountBasePath}/AL_CRM_QA_8016' \
              configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
              } ]'
            """
          }
        }
        stage('Provision AL_CRM_DEV') {
          steps {
            sh """/root/dct-toolkit provision_vdb_by_snapshot postgres \
              source_data_id='AL_CRM_MASK' \
              name='AL_CRM_DEV' \
              postgres_port='8017' \
              environment_id='${pipelineParams.stagingEnvId}' \
              environment_user_id='${pipelineParams.postgresUser}' --auto_select_repository \
              target_group_id='${pipelineParams.devGroupId}' \
              mount_point='${pipelineParams.mountBasePath}/AL_CRM_DEV_8017' \
              configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
              } ]'
            """
          }
        }
        stage('Provision AL_ERP_QA') {
          steps {
            sh """/root/dct-toolkit provision_vdb_by_snapshot postgres \
              source_data_id='AL_ERP_MASK' \
              name='AL_ERP_QA' \
              postgres_port='8026' \
              environment_id='${pipelineParams.stagingEnvId}' \
              environment_user_id='${pipelineParams.postgresUser}' --auto_select_repository \
              target_group_id='${pipelineParams.qaGroupId}' \
              mount_point='${pipelineParams.mountBasePath}/AL_ERP_QA_8026' \
              configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
              } ]'
            """
          }
        }
        stage('Provision AL_ERP_DEV') {
          steps {
            sh """/root/dct-toolkit provision_vdb_by_snapshot postgres \
              source_data_id='AL_ERP_MASK' \
              name='AL_ERP_DEV' \
              postgres_port='8027' \
              environment_id='${pipelineParams.stagingEnvId}' \
              environment_user_id='${pipelineParams.postgresUser}' --auto_select_repository \
              target_group_id='${pipelineParams.devGroupId}' \
              mount_point='${pipelineParams.mountBasePath}/AL_ERP_DEV_8027' \
              configure_clone='[ {
                     "name" : "Open Network Access",
                     "command" : ". /var/lib/pgsql/modify_pg_hba.sh",
                     "shell" : "bash",
                     "element_id" : "0",
                     "has_credentials" : false
              } ]'
            """
          }
        }
      }
    }

// Pause to Capture QA and DEV

    stage('PAUSE: QA & DEV') {
      steps {
        input message: 'Proceed with QA Testing?', ok: 'Yes, proceed'
      }
    }

// Bookmark AL_CRM_QA Pre-Test

    stage('Bookmark Pre-Test') {
      steps {
        sh "/root/dct-toolkit create_bookmark vdb_ids='AL_CRM_QA' name='Pre-Test Bookmark'"
      }
    }

// Start Testing and Destroy Data

    stage('Start Testing') {
      steps {
        sh """
          export PGPASSWORD=${pipelineParams.postgresPassword}
          psql -h ${pipelineParams.postgresHost} -p 8016 -U ${pipelineParams.postgresUser} -d crm -c \"UPDATE contacts SET last_name = 'LEE';\"
        """
      }
    }

    stage('Bookmark Error and Make Public') {
      steps {
        sh "/root/dct-toolkit create_bookmark vdb_ids='AL_CRM_QA' name='Error Bookmark' bookmark_type=PUBLIC"
      }
    }

// Pause to Capture ERROR

    stage('PAUSE: ERROR') {
      steps {
        input message: 'Proceed with Rewind QA & Refresh DEV?', ok: 'Yes, proceed'
      }
    }

// Rewind QA to Pre-Test and Refresh DEV to Bookmark ERROR

    stage('Rewind QA and Refresh DEV') {
      parallel {
        stage('Rewind QA') {
          steps {
            sh "/root/dct-toolkit refresh_vdb_from_bookmark vdb_id='AL_CRM_QA' bookmark_id='Pre-Test Bookmark'"
          }
        }
        stage('Refresh DEV') {
          steps {
            sh "/root/dct-toolkit refresh_vdb_from_bookmark vdb_id='AL_CRM_DEV' bookmark_id='Error Bookmark'"
          }
        }
      }
    }

// Pause: Delete whole Environment?

    stage('PAUSE: DELETE Env') {
      steps {
        script {
          try {
            timeout(time: 15, unit: 'MINUTES') {
              input message: 'Proceed to DELETE vDB?', ok: 'Yes, proceed'
            }
          } catch (err) {
            echo "No response within 15 minutes. Proceeding automatically."
          }
        }
      }
    }

    stage('Delete All QA/DEV vDB') {
      parallel {
        stage('Delete AL_CRM_QA') {
          steps {
            sh "/root/dct-toolkit delete_vdb vdb_id='AL_CRM_QA'"
          }
        }
        stage('Delete AL_CRM_DEV') {
          steps {
            sh "/root/dct-toolkit delete_vdb vdb_id='AL_CRM_DEV'"
          }
        }
        stage('Delete AL_ERP_QA') {
          steps {
            sh "/root/dct-toolkit delete_vdb vdb_id='AL_ERP_QA'"
          }
        }
        stage('Delete AL_ERP_DEV') {
          steps {
            sh "/root/dct-toolkit delete_vdb vdb_id='AL_ERP_DEV'"
          }
        }
      }
    }

    stage('Delete All MASKED vDB') {
      parallel {
        stage('Delete AL_CRM_MASK') {
          steps {
            sh "/root/dct-toolkit delete_vdb vdb_id='AL_CRM_MASK'"
          }
        }
        stage('Delete AL_ERP_MASK') {
          steps {
            sh "/root/dct-toolkit delete_vdb vdb_id='AL_ERP_MASK'"
          }
        }
      }
    }
  }
}